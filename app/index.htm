<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Explorer</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: #ccc;
        }
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
    </style>
</head>
<body>
    <h1>Database Explorer</h1>
    <button onclick="fetchSchema()">Get Schema</button>
    <button onclick="fetchTables()">Get Tables</button>
    <select id="tableSelect" style="display: none;" onchange="updateTableNameInput()">
        <option value="">Select a table</option>
    </select>
    <input type="text" id="tableNameInput" placeholder="Enter table name">
    <button onclick="fetchTableInfo()">Get Table Info</button>

    <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'TableResult')" id="defaultOpen">Table Result</button>
        <button class="tablinks" onclick="openTab(event, 'JSONResult')">JSON Result</button>
    </div>

    <div id="TableResult" class="tabcontent">
        <div id="tableResult"></div>
    </div>

    <div id="JSONResult" class="tabcontent">
        <pre id="jsonResult"></pre>
    </div>

    <script>
        function fetchSchema() {
            axios.get('/schema')
                .then(response => {
                    displayResult(response.data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function fetchTables() {
            axios.get('/table')
                .then(response => {
                    displayResult(response.data);
                    populateTableSelect(response.data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function fetchTableInfo() {
            const tableName = document.getElementById('tableNameInput').value;
            axios.get(`/table/${tableName}`)
                .then(response => {
                    displayResult(response.data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function displayResult(data) {
            // Display JSON
            document.getElementById('jsonResult').textContent = JSON.stringify(data, null, 2);

            // Display Table
            const tableResult = document.getElementById('tableResult');
            tableResult.innerHTML = ''; // Clear previous content

            if (Array.isArray(data)) {
                // For simple arrays (like table lists)
                const table = createTable(['Value'], data.map(item => [item]));
                tableResult.appendChild(table);
            } else if (typeof data === 'object' && data !== null) {
                if (data.content && Array.isArray(data.content)) {
                    // For table info results
                    const headers = data.schema.map(col => col.column_name);
                    const table = createTable(headers, data.content);
                    tableResult.appendChild(table);
                } else {
                    // For schema results or other objects
                    const table = createTable(['Key', 'Value']);
                    for (const [key, value] of Object.entries(data)) {
                        const row = table.insertRow();
                        row.insertCell().textContent = key;
                        row.insertCell().textContent = JSON.stringify(value);
                    }
                    tableResult.appendChild(table);
                }
            }

            // Open the Table Result tab by default
            document.getElementById("defaultOpen").click();
        }

        function createTable(headers, data) {
            const table = document.createElement('table');
            const headerRow = table.insertRow();
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                headerRow.appendChild(th);
            });
            data.forEach(rowData => {
                const row = table.insertRow();
                rowData.forEach(cellData => {
                    row.insertCell().textContent = cellData;
                });
            });
            return table;
        }

        function populateTableSelect(tables) {
            const select = document.getElementById('tableSelect');
            select.innerHTML = '<option value="">Select a table</option>';
            tables.forEach(table => {
                const option = document.createElement('option');
                option.value = table;
                option.textContent = table;
                select.appendChild(option);
            });
            select.style.display = 'inline-block';
            document.getElementById('tableNameInput').style.display = 'none';
        }

        function updateTableNameInput() {
            const select = document.getElementById('tableSelect');
            const input = document.getElementById('tableNameInput');
            input.value = select.value;
        }

        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        // Open the Table Result tab by default
        document.getElementById("defaultOpen").click();
    </script>
</body>
</html>